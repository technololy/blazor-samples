@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
    <label>
        User to chat with:
        <input @bind="recipientUserName" />
    </label>
</div>
<button @onclick="BeginConnection">Begin Chat</button>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? recipientUserName;
    private string? messageInput;
    private string? groupName;
    private Models.NotificationMessage? messageNotification;

    protected override async Task OnInitializedAsync()
    {
        messageNotification = new Models.NotificationMessage();
        await Task.Delay(1);
        //hubConnection = new HubConnectionBuilder().Build();
    }
    private async Task BeginConnection()
    {
        if (string.IsNullOrEmpty(userInput))
        {
            return;
        }
        if (string.IsNullOrEmpty(recipientUserName))
        {
            return;
        }
        groupName = FormGroupName(userInput, recipientUserName);

        //hubConnection = new HubConnectionBuilder()
        //    .WithUrl(Navigation.ToAbsoluteUri("/MessageHub"))
        //    .Build();
        hubConnection = new HubConnectionBuilder()
       .WithUrl($"https://kmnapi.azurewebsites.net/MessageHub?userId={userInput}&groupName={groupName}")
       .Build();

        //hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        //{
        //    var encodedMsg = $"{user}: {message}";
        //    messages.Add(encodedMsg);
        //    StateHasChanged();
        //});

        hubConnection.On<string>("NotificationReceived", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string>("GroupNotificationReceived", (message) =>
        {
            var encodedMsg = $"{message.Split("~")}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });


        await hubConnection.StartAsync();
    }
    private async Task Send()
    {
        //if (hubConnection is not null)
        //{
        //    await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        //}
        if (string.IsNullOrEmpty(messageInput)) return;
        if (string.IsNullOrEmpty(recipientUserName)) return;

        //if (hubConnection is not null)
        //{
        //    await hubConnection.SendAsync("SendNotificationToClient", recipientUserName, messageInput);
        //}

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendNotificationToGroup", groupName, $"{userInput}~ {messageInput}~ {DateTime.Now}");
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private string FormGroupName(string userId, string userId2)
    {
        string calculatedGroupName = "";
        IEnumerable<string> groupMembers = new List<string>() { userId, userId2 };
        groupMembers = groupMembers.OrderBy(x => x);
        foreach (var item in groupMembers)
        {
            calculatedGroupName += item;
        }
        return calculatedGroupName;
    }
}
